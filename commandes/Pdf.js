const { zokou } = require('../framework/zokou');
const PDFDocument = require('pdfkit');
const { Buffer } = require('buffer');
const fs = require('fs');

zokou({
    nomCom: "pdf",
    categorie: "Utilities",
    reaction: "üìÑ",
    description: "Convert text or replied message to PDF document",
    utilisation: ".topdf [text] or reply to a message",
    alias: ["pdf", "texttopdf"],
    filename: __filename
}, async (dest, zk, commandeOptions) => {
    const { repondre, arg, ms, auteurMsg, repondreMessage, infosGroupe } = commandeOptions;

    try {
        // Get text from command or quoted message
        let textToConvert = arg;
        if (!textToConvert && repondreMessage && repondreMessage.text) {
            textToConvert = repondreMessage.text;
        }

        if (!textToConvert) {
            return repondre("Please provide text or reply to a message to convert to PDF.\nExample: .topdf Hello World");
        }

        // Create PDF document with better formatting
        const doc = new PDFDocument({
            size: 'A4',
            margins: { top: 50, left: 50, right: 50, bottom: 50 },
            info: {
                Title: 'CHARLES-XMD Generated PDF',
                Author: 'CHARLES-XMD Bot',
                Creator: 'CHARLES-XMD'
            }
        });

        // Configure buffers for PDF data
        const buffers = [];
        doc.on('data', buffers.push.bind(buffers));
        
        // Custom styling
        doc.fontSize(20)
           .font('Helvetica-Bold')
           .text('CHARLES-XMD Document', { align: 'center' })
           .moveDown(0.5);
        
        doc.fontSize(12)
           .font('Helvetica')
           .text(new Date().toLocaleString(), { align: 'right' })
           .moveDown(2);
        
        doc.fontSize(14)
           .text(textToConvert, {
               align: 'left',
               indent: 30,
               columns: 1,
               height: 400,
               width: 500,
               ellipsis: true
           });

        // Add footer
        doc.fontSize(10)
           .text('Generated by CHARLES-XMD WhatsApp Bot', 50, doc.page.height - 50, { align: 'center' });

        doc.end();

        // Wait for PDF generation to complete
        await new Promise((resolve) => {
            doc.on('end', resolve);
        });

        const pdfData = Buffer.concat(buffers);
        const fileName = `CHARLES-XMD_${Date.now()}.pdf`;

        // Send the PDF document
        await zk.sendMessage(dest, {
            document: pdfData,
            mimetype: 'application/pdf',
            fileName: fileName,
            caption: `üìÑ *PDF Document Created*\n\n` +
                     `‚Ä¢ Generated: ${new Date().toLocaleString()}\n` +
                     `‚Ä¢ Requested by: @${auteurMsg.split('@')[0]}\n\n` +
                     `_Powered by CHARLES-XMD_`,
            mentions: [auteurMsg]
        }, { quoted: ms });

    } catch (e) {
        console.error('PDF Generation Error:', e);
        repondre(`‚ùå Failed to generate PDF: ${e.message}`);
    }
});
